Cas de test 0.1 : Test de la création d'un HotelDeVille (init) réussi

Condition initiales : 
		aucun
	Opérations : 
		L0 = init(2,2);
	Oracle : 
		getRace(L0) == ERace.HUMAIN
		getLarge(L0) == TRESOR.BOMB_UP
	Rapport :
		getType(L0) != TYPE.VIDE
			=> init, Le bloc est crée avec un mauvais type de bloc
		getTresor(L0) != TRESOR.BOMB_UP
			=> init, Le bloc est crée avec un mauvais type de trésor
-------------------------------------------------------------------------------------------------------------------------------
Cas de test 1.1 : Test de depot dans un HotelDeVille  réussi

Condition initiales : 
		aucun
	Opérations : 
		L0 = init(2,2);
	Oracle : 
		getRace(L0) == ERace.HUMAIN
		getLarge(L0) == TRESOR.BOMB_UP
	Rapport :
		getType(L0) != TYPE.VIDE
			=> init, Le bloc est crée avec un mauvais type de bloc
		getTresor(L0) != TRESOR.BOMB_UP
			=> init, Le bloc est crée avec un mauvais type de trésor
-------------------------------------------------------------------------------------------------------------------------------
Cas de test 2.1 : Test d'abandoned dans un HotelDeVille positif

Condition initiales : 
		aucun
	Opérations : 
		L0 = init(2,2);
	Oracle : 
		getRace(L0) == ERace.HUMAIN
		getLarge(L0) == TRESOR.BOMB_UP
	Rapport :
		getType(L0) != TYPE.VIDE
			=> init, Le bloc est crée avec un mauvais type de bloc
		getTresor(L0) != TRESOR.BOMB_UP
			=> init, Le bloc est crée avec un mauvais type de trésor
-------------------------------------------------------------------------------------------------------------------------------
Cas de test 3.1 : Test d'accueil dans un HotelDeVille réussi

Condition initiales : 
		aucun
	Opérations : 
		L0 = init(2,2);
	Oracle : 
		getRace(L0) == ERace.HUMAIN
		getLarge(L0) == TRESOR.BOMB_UP
	Rapport :
		getType(L0) != TYPE.VIDE
			=> init, Le bloc est crée avec un mauvais type de bloc
		getTresor(L0) != TRESOR.BOMB_UP
			=> init, Le bloc est crée avec un mauvais type de trésor
---------------------------------------------------------------------------------------------------------------------------
Cas de test 4.1 : Test de setOr dans un HotelDeVille réussi
Condition initiales : 
		aucun
	Opérations : 
		L0 = init(2,2);
	Oracle : 
		getRace(L0) == ERace.HUMAIN
		getLarge(L0) == TRESOR.BOMB_UP
	Rapport :
		getType(L0) != TYPE.VIDE
			=> init, Le bloc est crée avec un mauvais type de bloc
		getTresor(L0) != TRESOR.BOMB_UP
			=> init, Le bloc est crée avec un mauvais type de trésor
---------------------------------------------------------------------------------------------------------------------------
Cas de test 5.1 : Test de setAppartenance dans un HotelDeVille réussi
Condition initiales : 
		aucun
	Opérations : 
		L0 = init(2,2);
	Oracle : 
		getRace(L0) == ERace.HUMAIN
		getLarge(L0) == TRESOR.BOMB_UP
	Rapport :
		getType(L0) != TYPE.VIDE
			=> init, Le bloc est crée avec un mauvais type de bloc
		getTresor(L0) != TRESOR.BOMB_UP
			=> init, Le bloc est crée avec un mauvais type de trésor
---------------------------------------------------------------------------------------------------------------------------
Cas de test 6.1 : Test de SetAbandonCompteur dans un HotelDeVille réussi
Condition initiales : 
		aucun
	Opérations : 
		L0 = init(2,2);
	Oracle : 
		getRace(L0) == ERace.HUMAIN
		getLarge(L0) == TRESOR.BOMB_UP
	Rapport :
		getType(L0) != TYPE.VIDE
			=> init, Le bloc est crée avec un mauvais type de bloc
		getTresor(L0) != TRESOR.BOMB_UP
			=> init, Le bloc est crée avec un mauvais type de trésor