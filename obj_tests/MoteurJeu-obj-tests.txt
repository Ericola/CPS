Conditions initiales : aucune
	Operations : L0 = init(1664,1000,1000); //MaxPasJeu
	
			//after all tests without pasJeuCourant(pasJeu())=pasJeuCourant() +1 
				L1=pasJeu(L0,ECommande.DEPLACER, ECommande.DEPLACER, 1, 3, 240, 30)
	Oracle : 
		getMaxPasJeu(L0) == 1664
		getPasJeuCourant(L0) == 0
		LargeurTerrain(L0) == 1000
		HauteurTerrain(L0) == 1000
		
		Pour tout villageois appartenant a numerosVillageois(L0) de i=0 a numerosVillageois(L0).size() :
			- getVillageois(L0,i).getLargeur() == 10
			- getVillageois(L0,i).getHauteur() == 10
			
			V =getVillageois(L0,i)
			
			SI getVillageois(L0,i).getRace() == ERACE.HOMME
				-getVillageois(L0,i).getForce() == 3
				-getVillageois(L0,i).getVitesse() == 4	
				-distance(positionVillageoisX(M, V), positionVillageois(M, V), positionHotelVilleX(M, 2), positionHotelVilleY(M, 2)) <= 51
			
			SI getVillageois(L0,i).getRace() == ERACE.ORC
				-getVillageois(L0,i).getForce() == 4
				-getVillageois(L0,i).getVitesse() == 3
				-distance(positionVillageoisX(M, V), positionVillageois(M, V), positionHotelVilleX(M, 2), positionHotelVilleY(M, 2)) <= 51
			
		Pour toute mine m in numerosMine(L0)
		   Mine::getLargeur(m) == 50
		   Mine::getHauteur(m) == 50
		   
		Pour tout HotelVille hv in HotelVille(L0, 1) V HotelVille(L0, 2)
		   HotelVille::getLargeur(hv) == 50
		   HotelVille::getHauteur(hv) == 50
		   
		HotelVille(1)::appartenance(hv) == HUMAIN
		HotelVille(2)::appartenance(hv) == ORC
		
		MineMinee(L0).size() == numerosVillageois(L0).size()
		
	    VillageoisAttente(L0).size() == numerosVillageois(L0).size()
	    
	    Pour tout x in [0, MineMinee(L0).size()[
		   MineMinee(L0).get(x) == -1
		
		Pour tout x in [0, VillageoisAttente(L0).size()[
		   VillageoisAttente(L0).get(x) == -1
		
		pasJeuCourant(L1) == pasJeuCourant(L0) + 1
		
		
		rapport:
		
			getMaxPasJeu(L0) != 1664
				=>MJ init,Le nombre de pas de jeu n'est pas egale a 1664
			getPasJeuCourant(L0) != 0
				=>MJ init,La valeur du pas courant ne s'est pas initialisee a 0
			LargeurTerrain(L0) != 1000
				=>MJ init,La valeur de la largeur ne s'est pas initialisee correctement
			HauteurTerrain(L0) != 1000
				=>MJ init,La valeur du pas courant ne s'est pas initialisee correctement
		
			Pour tout villageois appartenant a numerosVillageois(L0) de i=0 a numerosVillageois(L0).size() :
				- getVillageois(L0,i).getLargeur() == 10
					=>in moteurJeu init: Le villageois numero i a une largeur mal initialisee
				- getVillageois(L0,i).getHauteur() == 10
					=>in moteurJeu init: Le villageois numero i a une hauteur mal initialisee
			
				V =getVillageois(L0,i)
				
			
				SI getVillageois(L0,i).getRace() == ERACE.HOMME
					-getVillageois(L0,i).getForce() != 3
						=>in moteurJeu init: Le villageois HOMME i a une force mal initialisee
					-getVillageois(L0,i).getVitesse() != 4	
						=>in moteurJeu init: Le villageois HOMME i a une vitesse mal initialisee
					-distance(positionVillageoisX(M, V), positionVillageois(M, V), positionHotelVilleX(M, 2), positionHotelVilleY(M, 2)) <= 51
						=>in moteurJeu init: Le villageois HOMME i est a une dist initialisee trop loin de son hotel de ville
				SI getVillageois(L0,i).getRace() == ERACE.ORC
					-getVillageois(L0,i).getForce() != 4
						=>in moteurJeu init: Le villageois ORC i a une force mal initialisee
					-getVillageois(L0,i).getVitesse() != 3
						=>in moteurJeu init: Le villageois ORC i a une force mal initialisee
					-distance(positionVillageoisX(M, V), positionVillageois(M, V), positionHotelVilleX(M, 2), positionHotelVilleY(M, 2)) <= 51
						=>in moteurJeu init: Le villageois HOMME i est a une dist initialiser trop loin de son hotel de ville
			Pour toute mine m in numerosMine(L0)
		  		Mine::getLargeur(m) != 50
		  			=>in moteurJeu init: La Mine m a une largeur mal initialisee.
		   		Mine::getHauteur(m) != 50
		   			=> in moteurJeu init: La Mine m a une hauteur mal initialisee.
		   
			Pour tout HotelVille hv in HotelVille(L0, 1) V HotelVille(L0, 2)
		  		HotelVille::getLargeur(hv) != 50
		  			=>in moteurJeu init: L hotel de ville hv a une Hauteur a une largeur mal initialisee
		   		HotelVille::getHauteur(hv) != 50
		   			=>in moteurJeu init: L hotel de ville hv a une Hauteur a une largeur mal initialisee
		   
			HotelVille(1)::appartenance(hv) != HUMAIN
				=>in moteurJeu init: L hotel de ville 1 n'appartient pas au HOMME a l'init alors qu'il le devrait
			HotelVille(2)::appartenance(hv) != ORC
				=>in moteurJeu init: L hotel de ville 2 n'appartient pas au ORC a l'init alors qu'il le devrait
			MineMinee(L0).size() != numerosVillageois(L0).size()
				=>in moteurJeu init: size MineMinee non ok car different de size liste villageois
		    VillageoisAttente(L0).size() != numerosVillageois(L0).size()
	    		=>in moteurJeu init: size villageoisAttente non ok car different de size liste villageois
		    Pour tout x in [0, MineMinee(L0).size()[
			   MineMinee(L0).get(x) != -1
				=>in moteurJeu init: le villageois x est entrain de miner (trouver via MineMinee(i) != -1) alors qu'il ne devrait pas
				
			Pour tout x in [0, VillageoisAttente(L0).size()[
		   		VillageoisAttente(L0).get(x) != -1
				=>in moteurJeu init: le villageois x est en attente (trouver via villageoisAttente(i) != -1) alors qu'il ne devrait pas
			
				
			pasJeuCourant(L1) != pasJeuCourant(L0) + 1
				=>in moteurJeu init: pasJeu s'est mal effectuee
		
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Cas de test 1.1 : entrer dans une mine

Conditions initiales :
	L0 = init(1664,1000,1000);
	//bouger le villageois 1 qui est humain a cote de la mine 0
	L1 = positionsVillageois(L0).put(moteurJeu.getVillageois(1), new Point(moteurJeu.positionMineX(moteurJeu.getMine(0)),moteurJeu.positionMineY(moteurJeu.getMine(0))));
		
	
Operations :
	L2 = pasJeu(L1,ECommande.ENTRERMINE, ECommande.RIEN, 1, 3, 0, 5);
	

Oracle :
	//Le pas jeu implique que la mine 0 est mine par le villageois 1
	(L2).get(1) == 0

rapport : 
	(L2).get(1) != 0
	 => estEntrerMine a rate

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Cas de test 2.1 : entrer dans une mine

Condition sinitiales :
L0 = init(1664,1000,1000);
//on donne une piece d'or au villageois 1, C'est le plus riche des villageois. 
//Mais le devoir l'appelle
//Il doit payer la taxe

//on sait qu'apres l'initialisation la quantite d'or de l'hotel de ville des hommes est a 16
V1 = OrHotelVilleBefore = 16; 
L1 = getVillageois(L0,1).setQtor(1);

Operations :
//LE DEVOIR L APPELLE , IL VA PAYER SES IMPOT A L'HOTEL DE VILLE (il est tout de meme toujours endette d'un bourse de 1000 PO)

L2 = pasJeu(L1,ECommande.ENTRERHOTELVILLE, ECommande.RIEN, 1, 3, 1, 5);

Oracle :
	//Le fait de payer 1PO a rendu l'hotel de ville des homme qui passe de 16 a une richesse de 17
	HotelDeVille(L2,1).orRestant() == OrHotelVilleBefore + 1

rapport : 
	HotelDeVille(L2,1).orRestant() != OrHotelVilleBefore + 1
		->EntrerVille n'a pas bien marche , il devrait avoir une piece d'or de plus qu'a  l'init
		
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Cas de test 3.1 : entrer dans une mine qui ne t'appartient pas		
	
//Une Mine est deja conquis par les orcs et un pauvre minier HUMAIN se trouvant dans les parages tente d'entrer	
Conditions initiales :
L0 = init(1664,1000,1000);
L1 = getMine(L0,0).setAppartenance(ERace.ORC);
//on mets le minier a cote de la mine
L2 =positionsVillageois(L1,1).put(moteurJeu.getVillageois(1), new Point(moteurJeu.positionMineX(moteurJeu.getMine(0)),moteurJeu.positionMineY(moteurJeu.getMine(0))));
				
Operations :
//le paysan tente vainement d'entrer, il est tres vite repousse par un champ de force

L3 = pasJeu(L2,ECommande.ENTRERMINE, ECommande.RIEN, 1, 3, 0, 5);

Oracle :
//on a donc toujours une appartenance orc pour la mine
		getMine(L3 , 0).appartenance() == ERace.ORC

rapport : 
	getMine(L3 , 0).appartenance() != ERace.ORC
	  => L'appartenance devrait etre ORC ce n'est pas le cas

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Cas de test 4.1 : entrer dans un Hotel de ville qui ne t'appartient pas		

Conditions initiales :
	L0 = init(1664,1000,1000);
	L1 = positionsVillageois(L0).put(moteurJeu.getVillageois(1), new Point(moteurJeu.positionHotelVilleX(2),moteurJeu.positionHotelVilleY(2)));
		
Operations :
	L2 = pasJeu(L1,ECommande.ENTRERHOTELVILLE, ECommande.RIEN, 1, 3, 2, 5);
Oracle :
	HotelDeVille(L2,2).appartenance() == ERace.ORC

rapport : 
	HotelDeVille(L2,2).appartenance() != ERace.ORC
		=> L'appartenance devrait etre ORC pour l'hotel de ville J2 ce n'est pas le cas 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Cas de test 5.1 : se deplacer 

///On verifie si le villageois 1 a changÃ© de position apres la commande
Conditions initiales :
	L0 = init(1664,1000,1000);
	P0 = positionsVillageois(L0).get(getVillageois(L0,1));
		
Operations :
	L1 = pasJeu(L0,ECommande.DEPLACER, ECommande.RIEN, 1, 3, 267 , 5);
Oracle :
	PosBefore.equals(positionsVillageois(L1).get(getVillageois(L1,1))) rend true

rapport : 
	PosBefore.equals(positionsVillageois(L1).get(getVillageois(L1,1))) rend false
		=> test5 : Le villageois 1 ne s'est pas bien deplace 
		
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Cas de test 6.1 : se deplacer sur une muraille

Conditions initiales :
	L0 = init(1664,1000,1000);
	L1 = positionsVillageois(L0).put(getVillageois(L0,1), new Point(positionMurailleX(L0,getMuraille(L0,0)),positionMurailleX(L0,getMuraille(L0,0))+15));
		
		
Operations :
	L2 = pasJeu(L1,ECommande.DEPLACER, ECommande.RIEN, 1, 3, 267 , 5);
Oracle :
	estSurMuraille(positionsVillageois(L2).get(getVillageois(L2,1)))) rend true 

rapport : 
	   estSurMuraille(positionsVillageois(L2).get(getVillageois(L2,1)))) rend false
		=> test6 : le villageois s'est deplace dans la muraille , c'est impossible 	
		
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Cas de test 7.1 : se deplace en dehors du terrain

Condition sinitiales :
	L0 = init(1664,1000,1000);
	L1 = positionsVillageois(L0).put(getVillageois(L0,1), new Point(1,1));
	P0 = positionsVillageois(L0).get(getVillageois(L0,1));
		
Operations :
	L2 = pasJeu(ECommande.DEPLACER, ECommande.RIEN, 1, 3, 49 , 5);  //se deplacer vers le haut
Oracle :
       P0.equals(positionsVillageois(L2).get(getVillageois(L2,1)) rend true
rapport : 
	   P0.equals(positionsVillageois(L2).get(getVillageois(L2,1)) rend false
		=> test7 : le villageois s'est deplace en dehors du terrain puis doit etre remis a sa position d'origine normalement mais ce n'est pas le cas
	
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Cas de test 8.1 : entrer dans un hotel de ville abandonne (celui de son equipe)

Conditions initiales :
	L0 = init(1664,1000,1000);
	L1 = HotelDeVille(L1,1).abandoned();
	L2 =getVillageois(L2,1).setQtor(1);
		
Operations :
	L3 = pasJeu(ECommande.ENTRERHOTELVILLE, ECommande.RIEN, 1, 3, 1 , 5);
Oracle :
       HotelDeVille(L3,1).appartenance() == ERace.HUMAIN
rapport : 
	 HotelDeVille(L3,1).appartenance() == ERace.HUMAIN
		=> test8 : le villageois 1 prend possession de son hotel de ville rate
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Cas de test 9.1 : 2 villageois de races differentes se deplacent sur la meme case

Conditions initiales :
	L0 = init(1664,1000,1000);
	L1 = positionsVillageois(L0).put(getVillageois(L0,1), new Point(1,1));
	L2 = positionsVillageois(L1).put(getVillageois(L1,3), new Point(1,8));
		
Operations :
	L3 = pasJeu(ECommande.DEPLACER, ECommande.DEPLACER, 1, 3, 49 , 267);
Oracle :
       positionsVillageois(L3).get(getVillageois(L3,3)).equals(positionsVillageois(L3).get(getVillageois(L3,1))) rend false
rapport : 
	positionsVillageois(L3).get(getVillageois(L3,3)).equals(positionsVillageois(L3).get(getVillageois(L3,1))) rend true
		=>test9 : le villageois 1 HUMAIN et LE VILLAGEOIS 3 ORC ,sont censes etre mis sur la meme case et pourtant. 
		
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Cas de test 10.1 : test hotel de ville abandonne des ennemis 
	 et verifier que la partie est gagne	

Conditions initiales :
	L0 = init(1664,1000,1000);
	L1 = moteurJeu.HotelDeVille(2).abandoned();
	L2=moteurJeu.getVillageois(1).setQtor(1);
	L3=positionsVillageois(L2).put(getVillageois(L2,1),new Point(positionHotelVilleX(L2,2),positionHotelVilleY(L2,2) )); 
				
				
		
Operations :
	L4 =pasJeu(L3,ECommande.DEPLACER, ECommande.RIEN, 1, 3, 49 , 5);
Oracle :
       HotelDeVille(L4,2).appartenance() ==ERace.HUMAIN
       estFini(L4) rend true
rapport : 
	 HotelDeVille(L4,2).appartenance() !=ERace.HUMAIN
	 	=>HOTEL DE VILLE n'est pas DEVENUE HUMAINE alors qu'elle le devrait
	 estFini(L4) rend false
	 	=>partie fini PAS FINI les HOMME DEVRAIT AVOIR GAGNE mais ce n'est pas le cas
	

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Cas de test 11.1 :test 51 pas jeu pour abandonne hotel ville	

Conditions initiales :
	L0 = init(1664,1000,1000);
	
				
		
Operations :
	L1=for(i=0;i<51;i++)
			pasJeu(L0,ECommande.RIEN, ECommande.RIEN, 1, 3, 0 , 0);
Oracle :
       HotelDeVille(L1,1).appartenance() == ERace.RIEN
rapport : 
	moteurJeu.HotelDeVille(L2,1).appartenance() != ERace.RIEN
	 	=>test11: l'hotel de ville n'est pas abandonne alors qu'il le devrait 
	 	
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Cas de test 12.1 :test 51 pas jeu pour abandonne hotel ville	

Conditions initiales :
	L0 = init(1664,1000,1000);
	
	L1 =getMine(L0,1).setAppartenance(ERace.HUMAIN);		
		
Operations :
	L2=for(i=0;i<51;i++)
			pasJeu(L1,ECommande.RIEN, ECommande.RIEN, 1, 3, 0 , 0);
Oracle :
       HotelDeVille(L2,1).appartenance() == ERace.RIEN
rapport : 
	HotelDeVille(L2,1).appartenance() != ERace.RIEN
	 	=>test12: la mine n'est pas abandonne alors qu'il le devrait

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Cas de test 13.1: tester FIN DE PARTIE AU BOUT DE 100 PAS JEU pour une partie a 100 pas jeu

Conditions initiales :
	L0 = init(1664,1000,1000);

Operations :
	L2=for(i=0;i<100;i++)
			pasJeu(L0,ECommande.RIEN, ECommande.RIEN, 1, 3, 0 , 0);
Oracle :
       estFini(L2) == true
       resultatFinal(L2)==EResultat.DRAW
rapport : 
	estFini(L2) != true
	 	=>test13_1: La partie devrait etre fini au bout de nbPasJeu max mais ce n'est pas le cas.
	 resultatFinal(L2)==EResultat.DRAW
		=>test13_2: La partie n est pas DRAW ,error 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Cas de test 14.1: tester FIN DE PARTIE AU BOUT DE 100 PAS JEU pour une partie a 100 pas jeu

Conditions initiales :
	L0 = init(1664,1000,1000);
		
Operations :
	L1=HotelDeVille(L0,1).depot(1664)
	
Oracle :
       estFini(L2) == true
rapport : 
	estFini(L2) != true
	 	=>test14: La partie devraitetre fini au bout de nbPasJeu max mais ce n'est pas le cas
	
		