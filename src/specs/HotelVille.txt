Service : HotelVille
Types: int, boolean, enum ERace{HUMAIN, ORC, RIEN}
Observators :
	const getLargeur : [HotelVille] -> int
    const getHauteur : [HotelVille] -> int 
	orRestant : [HotelVille] -> int 
	estAbandonnee : [HotelVille] -> boolean
    appartenance : [HotelVille] -> ERace
	abandonCompteur : [HotelVille] -> int

Constructors :
	init : int * int * ERace -> [HotelVille]
		pre init(largeur,hauteur, r) require largeur%2=1 ˆ hauteur%2=1

Operators
	depot : [HotelVille] * int -> [HotelVille]
	accueil : [HotelVille] * ERace -> [HotelVille] 
		pre accueil(H) require ¬estAbandonnee(H) && r != RIEN
	abandoned : [HotelVille] -> [HotelVille]
		pre abandoned(H) require estAbandonnee(H)
	 setOrRestant : [HotelVille] * int -> [HotelVille] 
        pre setOrRestant(H, s) require s > 0
     setAppartenance : [HotelVille] * ERace -> [HotelVille]
     setAbandonCompteur : [HotelVille] * int -> [HotelVille] 
        pre setAbandonCompteur(H, s) require s > 0
		
Observations :
	[invariants]	
		estAbandonnee(H) =(min) abandonCompteur = 51 && =(min) appartenance(H) = RIEN
		0 <= abandonCompteur(H)<= 51 
		
	[init]
		largeur(init(l,h,r))=l 
		hauteur(init(l,h,r))=h 
		orRestant(init(l,h,r))=16
		appartenance(init(l, h, r)) = r
		
	[accueil] 
		orRestant(accueil(H, r))=orRestant(H) 
		abandonCompteur(accueil(H, r))=0
		appartenance(accueil(H,r)) = r 
		
	[abandoned]
		orRestant(abandoned(H))=orRestant(H) 
		appartenance(abandoned(H)) = RIEN
	
	[depot]
		orRestant(depot(H,s))=orRestant(H)+s 
		estAbandonnee(depot(H,s))=false
		
	[setOrRestant]
	    orRestant(setOrRestant(H, s)) = orRestant(H)
		orRestant(setOrRestant(H, s)) = s
		
	[setAppartenance]
		appartenance(setAppartenance(H, r)) = r 
		orRestant(setAppartenance(H, r)) = orRestant(H)
		
	[setAbandonCompteur]
	    orRestant(setAbandonCompteur(H, s)) = AbandonCompteur(H)
		orRestant(setAbandonCompteur(H, s)) = s


	
